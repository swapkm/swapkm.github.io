{"version":3,"file":"component---src-pages-index-tsx-c694af7dd571b4f20758.js","mappings":"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","sources":["webpack://swapkam/./src/components/seo.tsx","webpack://swapkam/./src/hooks/use-site-metadata.tsx","webpack://swapkam/./src/pages/index.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\nimport favicon from \"../images/icon.svg\";\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  pathname?: string;\n  image?: string;\n  categories?: string;\n  type?: string;\n  children?: ReactNode;\n}\n\nexport const SEO: React.FC<SEOProps> = ({\n  title,\n  description,\n  pathname,\n  image: postImage,\n  categories,\n  type,\n  children,\n}) => {\n  const {\n    title: defaultTitle,\n    description: defaultDescription,\n    siteUrl,\n    twitterUsername,\n    image: siteMetadataImage,\n    imageAlt,\n  } = useSiteMetadata();\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: postImage\n      ? `${siteUrl}${postImage}`\n      : `${siteUrl}${siteMetadataImage}`,\n    url: `${siteUrl}${pathname || ``}`,\n    twitterUsername,\n    imageAlt,\n    categories,\n    type,\n  };\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} />\n\n      <meta property=\"og:locale\" content=\"en_GB\" />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta\n        property=\"og:image:alt\"\n        content={imageAlt || title || defaultTitle}\n      />\n      <meta property=\"og:type\" content={type} />\n      <link rel=\"icon\" href={favicon} />\n      {children}\n    </>\n  );\n};\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterUsername\n          image\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n","import * as React from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport { SEO } from \"../components/seo\";\n\ninterface IndexPageProps extends PageProps {\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n      };\n    };\n  };\n}\n\nconst IndexPage: React.FC<PageProps> = ({ data, location }) => {\n  const posts = data.allMdx.nodes;\n  return (\n    <Layout>\n      <>\n        <ol style={{ listStyle: `none` }}>\n          {posts.map((post) => {\n            const title = post.frontmatter.title || post.fields.slug;\n\n            return (\n              <li key={post.frontmatter.slug} className=\"md:px-20\">\n                <Link\n                  className=\"block rounded-3xl bg-pink-50 shadow-md hover:shadow-lg transition duration-300 p-2\"\n                  to={post.frontmatter.slug}\n                >\n                  <div>\n                    {post.frontmatter.image && (\n                      <img\n                        src={post.frontmatter.image}\n                        alt={post.frontmatter.title}\n                        style={{ maxWidth: \"100%\", height: \"auto\" }}\n                        className=\"block rounded-3xl\"\n                      />\n                    )}\n                    <h2 className=\"text-2xl font-bold text-shadow m-5\">\n                      <span>{title}</span>\n                    </h2>\n                    <small className=\"text-shadow mx-5 text-black\">\n                      {post.frontmatter.date}, Tags: {post.frontmatter.tags.map((tag) => (\n                        <span key={tag} className=\"mr-2\">\n                          {tag}\n                        </span>\n                      ))}\n                    </small>\n                  </div>\n                  <div>\n                    <p\n                      className=\"m-5 text-black\"\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                    />\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ol>\n      </>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nconst schema = {\n  \"@context\": \"https://schema.org\",\n  \"@graph\": [\n    {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Organization\",\n      url: \"https://swapkam.com/\",\n      logo: \"https://swapkam.com/images/logo.svg\",\n    },\n    {\n      \"@type\": \"WebSite\",\n      \"@id\": \"https://swapkam.com/#website\",\n      url: \"https://swapkam.com\",\n      name: \"SwapKam\",\n      alternateName: \"SK\",\n      publisher: { \"@id\": \"https://swapkam.com/#person\" },\n      inLanguage: \"en-US\",\n      potentialAction: {\n        \"@type\": \"SearchAction\",\n        target: \"https://swapkam.com/?s={search_term_string}\",\n        \"query-input\": \"required name=search_term_string\",\n      },\n    },\n  ],\n};\n\nexport const Head = () => (\n  <SEO title=\"SwapKam - Tech Insides\">\n    <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n  </SEO>\n);\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          slug\n          description\n          image\n          tags\n        }\n      }\n    }\n  }\n`;\n"],"names":["SEO","_ref","title","description","pathname","image","postImage","categories","type","children","defaultTitle","defaultDescription","siteUrl","twitterUsername","siteMetadataImage","imageAlt","useStaticQuery","site","siteMetadata","seo","url","React","name","content","property","rel","href","favicon","data","location","posts","allMdx","nodes","Layout","style","listStyle","map","post","frontmatter","fields","slug","key","className","Link","to","src","alt","maxWidth","height","date","tags","tag","dangerouslySetInnerHTML","__html","excerpt","schema","logo","alternateName","publisher","inLanguage","potentialAction","target","Head","JSON","stringify"],"sourceRoot":""}